// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class AuthHandler {
    constructor() {
        this.users = [];
        this.currentUser = null;
        this.loadUsers();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage (–∏–º–∏—Ç–∞—Ü–∏—è txt —Ñ–∞–π–ª–∞)
    loadUsers() {
        try {
            const userData = localStorage.getItem('webprog_users');
            if (userData) {
                this.users = JSON.parse(userData);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            this.users = [];
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ localStorage (–∏–º–∏—Ç–∞—Ü–∏—è txt —Ñ–∞–π–ª–∞)
    saveUsers() {
        try {
            localStorage.setItem('webprog_users', JSON.stringify(this.users));
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return false;
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register(userData) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = this.users.find(user => user.email === userData.email);
        if (existingUser) {
            return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' };
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!this.validateEmail(userData.email)) {
            return { success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å' };
        }

        if (!this.validatePassword(userData.password)) {
            return { success: false, message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' };
        }

        if (userData.password !== userData.confirmPassword) {
            return { success: false, message: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç' };
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
            id: Date.now(),
            firstName: userData.firstName,
            lastName: userData.lastName,
            email: userData.email,
            password: this.hashPassword(userData.password), // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt
            phone: userData.phone || '',
            newsletter: userData.newsletter || false,
            registrationDate: new Date().toISOString(),
            lastLogin: null
        };

        this.users.push(newUser);
        
        if (this.saveUsers()) {
            return { success: true, message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!' };
        } else {
            return { success: false, message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' };
        }
    }

    // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    login(email, password) {
        const user = this.users.find(u => u.email === email);
        
        if (!user) {
            return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        if (user.password !== this.hashPassword(password)) {
            return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' };
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        user.lastLogin = new Date().toISOString();
        this.saveUsers();
        
        this.currentUser = user;
        localStorage.setItem('webprog_current_user', JSON.stringify(user));

        return { success: true, message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!' };
    }

    // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logout() {
        this.currentUser = null;
        localStorage.removeItem('webprog_current_user');
    }

    // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt)
    hashPassword(password) {
        let hash = 0;
        for (let i = 0; i < password.length; i++) {
            const char = password.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
        }
        return hash.toString();
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    validatePassword(password) {
        return password && password.length >= 6;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
    checkPasswordStrength(password) {
        let strength = 0;
        let feedback = '–°–ª–∞–±—ã–π';
        let color = '#ff4757';

        if (password.length >= 6) strength += 1;
        if (password.length >= 10) strength += 1;
        if (/[a-z]/.test(password)) strength += 1;
        if (/[A-Z]/.test(password)) strength += 1;
        if (/[0-9]/.test(password)) strength += 1;
        if (/[^A-Za-z0-9]/.test(password)) strength += 1;

        if (strength >= 2 && strength < 4) {
            feedback = '–°—Ä–µ–¥–Ω–∏–π';
            color = '#ffa502';
        } else if (strength >= 4) {
            feedback = '–°–∏–ª—å–Ω—ã–π';
            color = '#2ed573';
        }

        return {
            strength: Math.min(strength, 4),
            feedback,
            color,
            percentage: (Math.min(strength, 4) / 4) * 100
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authHandler = new AuthHandler();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `notification ${type}`;
    notification.classList.add('show');

    setTimeout(() => {
        notification.classList.remove('show');
    }, 4000);
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
function togglePassword(fieldId = 'password') {
    const passwordField = document.getElementById(fieldId);
    const toggleBtn = passwordField.nextElementSibling.nextElementSibling;
    
    if (passwordField.type === 'password') {
        passwordField.type = 'text';
        toggleBtn.textContent = 'üôà';
    } else {
        passwordField.type = 'password';
        toggleBtn.textContent = 'üëÅÔ∏è';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
function initLoginPage() {
    const loginForm = document.getElementById('loginForm');
    
    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const submitBtn = document.querySelector('.submit-btn');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            submitBtn.classList.add('loading');
            
            setTimeout(() => {
                const result = authHandler.login(email, password);
                
                submitBtn.classList.remove('loading');
                
                if (result.success) {
                    showNotification(result.message, 'success');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if (typeof window.universalAuth !== 'undefined') {
                        window.universalAuth.updateAuthButton();
                    }
                    
                    setTimeout(() => {
                        window.location.href = '../index.html';
                    }, 1500);
                } else {
                    showNotification(result.message, 'error');
                    // –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    const authCard = document.querySelector('.auth-card');
                    authCard.style.animation = 'shake 0.5s ease-in-out';
                    setTimeout(() => {
                        authCard.style.animation = '';
                    }, 500);
                }
            }, 1000);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä—è—Å–∫–∏
        const shakeStyle = document.createElement('style');
        shakeStyle.textContent = `
            @keyframes shake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-10px); }
                75% { transform: translateX(10px); }
            }
        `;
        document.head.appendChild(shakeStyle);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function initRegisterPage() {
    const registerForm = document.getElementById('registerForm');
    
    if (registerForm) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
        const passwordField = document.getElementById('password');
        const strengthBar = document.querySelector('.strength-fill');
        const strengthText = document.querySelector('.strength-text');
        
        if (passwordField && strengthBar && strengthText) {
            passwordField.addEventListener('input', function() {
                const strength = authHandler.checkPasswordStrength(this.value);
                
                strengthBar.style.width = strength.percentage + '%';
                strengthBar.style.background = strength.color;
                strengthText.textContent = strength.feedback;
                strengthText.style.color = strength.color;
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        const confirmPasswordField = document.getElementById('confirmPassword');
        if (confirmPasswordField) {
            confirmPasswordField.addEventListener('input', function() {
                const password = passwordField.value;
                const confirmPassword = this.value;
                
                if (confirmPassword && password !== confirmPassword) {
                    this.style.borderColor = '#ff4757';
                    this.style.boxShadow = '0 0 10px rgba(255, 71, 87, 0.3)';
                } else {
                    this.style.borderColor = '#29c5e6';
                    this.style.boxShadow = '0 0 10px rgba(41, 197, 230, 0.3)';
                }
            });
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ë–µ–ª–∞—Ä—É—Å–∏
        const phoneField = document.getElementById('phone');
        if (phoneField) {
            phoneField.addEventListener('input', function() {
                let value = this.value.replace(/\D/g, '');
                if (value.startsWith('375')) {
                    value = value.substring(3);
                }
                if (value.length > 0) {
                    value = value.substring(0, 9);
                    let formatted = '+375';
                    if (value.length > 0) {
                        formatted += ' (' + value.substring(0, 2);
                        if (value.length > 2) {
                            formatted += ') ' + value.substring(2, 5);
                            if (value.length > 5) {
                                formatted += '-' + value.substring(5, 7);
                                if (value.length > 7) {
                                    formatted += '-' + value.substring(7, 9);
                                }
                            }
                        } else {
                            formatted += ')';
                        }
                    }
                    this.value = formatted;
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        registerForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const userData = {
                firstName: formData.get('firstName'),
                lastName: formData.get('lastName'),
                email: formData.get('email'),
                password: formData.get('password'),
                confirmPassword: formData.get('confirmPassword'),
                phone: formData.get('phone'),
                newsletter: formData.get('newsletter') === 'on'
            };
            
            const submitBtn = document.querySelector('.submit-btn');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            submitBtn.classList.add('loading');
            
            setTimeout(() => {
                const result = authHandler.register(userData);
                
                submitBtn.classList.remove('loading');
                
                if (result.success) {
                    showNotification(result.message, 'success');
                    
                    // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    createConfetti();
                    
                    setTimeout(() => {
                        window.location.href = 'login.html';
                    }, 2000);
                } else {
                    // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ 404
                    showNotification(result.message, 'error');
                    
                    setTimeout(() => {
                        window.location.href = '../404.html';
                    }, 2000);
                    
                    // –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    const authCard = document.querySelector('.auth-card');
                    authCard.style.animation = 'shake 0.5s ease-in-out';
                    setTimeout(() => {
                        authCard.style.animation = '';
                    }, 500);
                }
            }, 1500);
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
function createConfetti() {
    const colors = ['#29c5e6', '#1b8ea6', '#7e7e7e', '#f8f8f8'];
    const confettiCount = 50;
    
    for (let i = 0; i < confettiCount; i++) {
        const confetti = document.createElement('div');
        confetti.style.position = 'fixed';
        confetti.style.width = '10px';
        confetti.style.height = '10px';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.left = Math.random() * 100 + 'vw';
        confetti.style.top = '-10px';
        confetti.style.zIndex = '9999';
        confetti.style.borderRadius = '50%';
        confetti.style.pointerEvents = 'none';
        
        document.body.appendChild(confetti);
        
        const animation = confetti.animate([
            { transform: 'translateY(0) rotate(0deg)', opacity: 1 },
            { transform: `translateY(100vh) rotate(${Math.random() * 360}deg)`, opacity: 0 }
        ], {
            duration: Math.random() * 2000 + 1000,
            easing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'
        });
        
        animation.onfinish = () => {
            confetti.remove();
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
function exportUsersToFile() {
    const users = authHandler.users;
    let content = 'WEBPROG - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n';
    content += '=====================================\n\n';
    
    users.forEach((user, index) => {
        content += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}:\n`;
        content += `ID: ${user.id}\n`;
        content += `–ò–º—è: ${user.firstName} ${user.lastName}\n`;
        content += `Email: ${user.email}\n`;
        content += `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        content += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(user.registrationDate).toLocaleString('ru-RU')}\n`;
        content += `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${user.lastLogin ? new Date(user.lastLogin).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}\n`;
        content += `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏: ${user.newsletter ? '–î–∞' : '–ù–µ—Ç'}\n`;
        content += '-----------------------------------\n\n';
    });
    
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'webprog_users.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
document.addEventListener('DOMContentLoaded', function() {
    const socialBtns = document.querySelectorAll('.social-btn');
    
    socialBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            let provider = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä';
            if (this.classList.contains('google-btn')) {
                provider = 'Google';
            } else if (this.classList.contains('yandex-btn')) {
                provider = '–Ø–Ω–¥–µ–∫—Å';
            }
            showNotification(`–í—Ö–æ–¥ —á–µ—Ä–µ–∑ ${provider} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`, 'warning');
        });
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkAuth() {
    const currentUser = localStorage.getItem('webprog_current_user');
    if (currentUser) {
        authHandler.currentUser = JSON.parse(currentUser);
        return true;
    }
    return false;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.authHandler = authHandler;
window.showNotification = showNotification;
window.togglePassword = togglePassword;
window.initLoginPage = initLoginPage;
window.initRegisterPage = initRegisterPage;
window.exportUsersToFile = exportUsersToFile;
window.checkAuth = checkAuth; 