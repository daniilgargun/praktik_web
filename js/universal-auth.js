// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
class UniversalAuth {
    constructor() {
        this.basePath = this.detectBasePath();
        this.authPath = this.detectAuthPath();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è 
        console.log('UniversalAuth initialized:');
        console.log('- Protocol:', window.location.protocol);
        console.log('- Pathname:', window.location.pathname);
        console.log('- Base path:', this.basePath);
        console.log('- Auth path:', this.authPath);
        
        this.init();
    }

    detectBasePath() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ (file://) –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
        const isLocalFile = window.location.protocol === 'file:';
        
        if (isLocalFile) {
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
            const path = window.location.pathname;
            const currentFile = path.split('/').pop() || 'index.html';
            
            if (currentFile === 'index.html' || path.endsWith('/')) {
                return './'; // –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            } else {
                return '../'; // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
            }
        } else {
            // –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
            const path = window.location.pathname;
            const segments = path.split('/').filter(segment => segment !== '');
            
            if (segments.length <= 1) {
                return './';
            } else {
                return '../'.repeat(segments.length - 1);
            }
        }
    }

    detectAuthPath() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ (file://) –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
        const isLocalFile = window.location.protocol === 'file:';
        const path = window.location.pathname;
        const currentFile = path.split('/').pop() || 'index.html';
        
        if (isLocalFile) {
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            if (currentFile === 'index.html' || path.endsWith('/')) {
                return 'auth/'; // –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            } else {
                return '../auth/'; // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
            }
        } else {
            // –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
            if (path === '/' || (path.endsWith('index.html') && !path.includes('/'))) {
                return 'auth/'; // –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            } else {
                return this.basePath + 'auth/'; // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            }
        }
    }

    init() {
        this.setupAuth();
        this.checkAuth();
    }

    setupAuth() {
        const loginBtn = document.getElementById('loginBtn');
        const modal = document.getElementById('authModal');
        const closeBtn = modal?.querySelector('.close');

        if (loginBtn) {
            loginBtn.addEventListener('click', () => {
                const currentUser = localStorage.getItem('webprog_current_user');
                if (currentUser) {
                    this.logout();
                } else {
                    modal.classList.add('show');
                    modal.style.display = 'flex';
                    this.playClickSound();
                }
            });
        }

        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                this.closeModal();
            });
        }

        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal?.classList.contains('show')) {
                this.closeModal();
            }
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.setupRedirectFunctions();
    }

    checkAuth() {
        const currentUser = localStorage.getItem('webprog_current_user');
        this.updateAuthButton(currentUser);
    }

    updateAuthButton(currentUser = null) {
        const loginBtn = document.getElementById('loginBtn');
        if (!loginBtn) return;

        if (currentUser || localStorage.getItem('webprog_current_user')) {
            const userData = JSON.parse(currentUser || localStorage.getItem('webprog_current_user'));
            const firstName = userData.firstName || userData.email.split('@')[0];
            
            loginBtn.classList.add('logged-in');
            loginBtn.innerHTML = `
                <div class="user-info">
                    <span class="user-icon">üë§</span>
                    <span class="user-name">${firstName}</span>
                </div>
                <span class="logout-text">–í—ã–π—Ç–∏</span>
            `;
        } else {
            loginBtn.classList.remove('logged-in');
            loginBtn.innerHTML = '–í—Ö–æ–¥';
        }
    }

    logout() {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        this.showLogoutConfirmation();
    }

    showLogoutConfirmation() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
        const confirmModal = document.createElement('div');
        confirmModal.className = 'modal logout-confirm-modal';
        confirmModal.innerHTML = `
            <div class="modal-content logout-confirm-content">
                <div class="logout-confirm-header">
                    <div class="logout-icon">üö™</div>
                    <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞</h2>
                    <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?</p>
                </div>
                
                <div class="logout-confirm-buttons">
                    <button class="logout-btn confirm-logout">
                        <span class="btn-icon">‚úì</span>
                        <span>–î–∞, –≤—ã–π—Ç–∏</span>
                    </button>
                    <button class="logout-btn cancel-logout">
                        <span class="btn-icon">‚úï</span>
                        <span>–û—Ç–º–µ–Ω–∞</span>
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(confirmModal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            confirmModal.classList.add('show');
            confirmModal.style.display = 'flex';
        }, 10);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const confirmBtn = confirmModal.querySelector('.confirm-logout');
        const cancelBtn = confirmModal.querySelector('.cancel-logout');

        confirmBtn.addEventListener('click', () => {
            this.performLogout();
            this.closeConfirmModal(confirmModal);
        });

        cancelBtn.addEventListener('click', () => {
            this.closeConfirmModal(confirmModal);
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        confirmModal.addEventListener('click', (e) => {
            if (e.target === confirmModal) {
                this.closeConfirmModal(confirmModal);
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        const escapeHandler = (e) => {
            if (e.key === 'Escape') {
                this.closeConfirmModal(confirmModal);
                document.removeEventListener('keydown', escapeHandler);
            }
        };
        document.addEventListener('keydown', escapeHandler);
    }

    closeConfirmModal(modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }

    performLogout() {
        localStorage.removeItem('webprog_current_user');
        this.updateAuthButton();
        this.showLogoutNotification();
        this.playClickSound();
    }

    showLogoutNotification() {
        const notification = document.createElement('div');
        notification.className = 'logout-notification show';
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">üëã</span>
                <span class="notification-text">–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞</span>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }

    closeModal() {
        const modal = document.getElementById('authModal');
        if (modal) {
            const modalContent = modal.querySelector('.modal-content');
            modalContent.classList.add('closing');
            
            setTimeout(() => {
                modal.classList.remove('show');
                modal.style.display = 'none';
                modalContent.classList.remove('closing');
            }, 300);
        }
    }

    setupRedirectFunctions() {
        // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
        window.redirectToLogin = () => {
            this.showLoadingEffect();
            setTimeout(() => {
                window.location.href = this.authPath + 'login.html';
            }, 500);
        };

        window.redirectToRegister = () => {
            this.showLoadingEffect();
            setTimeout(() => {
                window.location.href = this.authPath + 'register.html';
            }, 500);
        };
    }

    showLoadingEffect() {
        const modal = document.getElementById('authModal');
        if (modal) {
            const loadingOverlay = document.createElement('div');
            loadingOverlay.className = 'loading-overlay';
            loadingOverlay.innerHTML = `
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</p>
                </div>
            `;
            
            modal.querySelector('.modal-content').appendChild(loadingOverlay);
        }
    }

    playClickSound() {
        if (typeof(AudioContext) !== "undefined" || typeof(webkitAudioContext) !== "undefined") {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
            oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.1);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    window.universalAuth = new UniversalAuth();
}); 